from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from FSM import OrderFood, BugReport
from create_bot import bot, service
from keyboards import init_keyboard, yes_no_kb, back_inline_kb, confirm_inline_kb
from db_handlers import bug_save


async def report(call):
    if call.data == '–î–∞':
        await bot.edit_message_text("üìù –í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å "
                                    "–≤—Å–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ (–±–∞–≥–∞), –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏"
                                    "\n\n–ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç (–æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ) –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è —Å–ª–µ–¥—É—é—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã:"
                                    "\n1. –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞\n2. –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å\n3. –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã"
                                    "\n4. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n5. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π "
                                    "(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n6. —Å–∫—Ä–∏–Ω—à–æ—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", call.from_user.id, call.message.message_id)
        await BugReport.photo.set()
    else:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id, init_keyboard.name, reply_markup=init_keyboard)
        await OrderFood.init.set()


async def get_photo(message: types.Message, state=FSMContext):
    if len(message.text) > 50 and len(message.text.split(" ")) > 6:
        await bot.send_message(message.from_user.id, "‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç?", reply_markup=yes_no_kb)
        await state.update_data(description=message.text)
        await BugReport.photo_agree.set()
    elif message.text == "‚óÄ–ù–∞–∑–∞–¥":
        await bot.send_message(message.from_user.id, init_keyboard.name, reply_markup=init_keyboard)
        await OrderFood.init.set()
    else:
        await bot.send_message(message.from_user.id, "‚ùó –í—ã –∑–∞—Ç—Ä–æ–Ω—É–ª–∏ –Ω–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")


async def send_photo(call, state=FSMContext):
    if call.data == "–î–∞":
        await bot.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–∞–≥–∞...", call.from_user.id, call.message.message_id, reply_markup=back_inline_kb)
        await BugReport.photo_send.set()
    else:
        await bot.edit_message_text("‚ùï –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç", call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id,
                               "‚ö† –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\" –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ—Ö, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –≤—ã—à–µ, –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è *–§.–ò.–û, –≥—Ä—É–ø–ø—É –∏ —Ç–µ–ª–µ–≥—Ä–∞–º —é–∑–µ—Ä–Ω–µ–π–º*",
                               reply_markup=confirm_inline_kb, parse_mode="Markdown")
        await state.update_data(photo_id=0)
        await BugReport.send.set()


async def screenshot(call):
    await bot.edit_message_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç?", call.from_user.id, call.message.message_id, reply_markup=yes_no_kb)
    await BugReport.photo_agree.set()


async def photo(message: types.Message, state=FSMContext):
    await bot.send_message(message.from_user.id, "‚úÖ Noted")
    await bot.send_message(message.from_user.id,
                           "‚ö† –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\" –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤—Å–µ—Ö, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –≤—ã—à–µ, –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è *–§.–ò.–û, –≥—Ä—É–ø–ø—É –∏ —Ç–µ–ª–µ–≥—Ä–∞–º —é–∑–µ—Ä–Ω–µ–π–º*",
                           reply_markup=confirm_inline_kb, parse_mode="Markdown")
    await bot.edit_message_text("‚ùï –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç", message.from_user.id, message.message_id - 1)
    await state.update_data(photo_id=message.photo[-1].file_id)
    await BugReport.send.set()


async def report_send(call, state=FSMContext):
    if call.data == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await bot.edit_message_text(
            "‚ùï –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–≥–µ, –∞ —Ç–∞–∫–∂–µ —Å–≤–æ–∏—Ö –§.–ò.–û, –≥—Ä—É–ø–ø—ã –∏ —Ç–µ–ª–µ–≥—Ä–∞–º —é–∑–µ—Ä–Ω–µ–π–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –±–æ—Ç–∞",
            call.from_user.id, call.message.message_id)
        await bot.send_photo(call.from_user.id, "AgACAgIAAxkBAAIwhGQAAfQYMhNum4KemNPljyH_NgMB0gACR8QxG2zwAUivXsPIpfPBgAEAAwIAA3gAAy4E", caption="‚úÖ –ë–∞–≥-—Ä–µ–ø–æ—Ä—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –±–æ—Ç–∞!\nüìû –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–∞—Å–∞–µ–º–æ –±–∞–≥–∞, —Å –≤–∞–º–∏ –º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ò–Ω—Ç–µ—Ä—Ö–∞—É—Å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—É–¥–µ—Ç –≤–∞—à –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞ü´°")
        await bot.send_message(call.from_user.id, init_keyboard.name, reply_markup=init_keyboard)
        await OrderFood.init.set()

        data = await state.get_data()
        bug_save(call.from_user.id, call.from_user.username, data["description"], data["photo_id"])

        for i in service:
            if data['photo_id'] == 0:
                await bot.send_message(call.from_user.id, data['description'])
            else:
                await bot.send_photo(i, data['photo_id'], caption=data['description'])
    elif call.data == "‚óÄ–ù–∞–∑–∞–¥":
        await bot.edit_message_text("‚ùó –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç", call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id, init_keyboard.name, reply_markup=init_keyboard)
        await OrderFood.init.set()


def register_bug_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(report, lambda call: True, state=BugReport.description)
    dp.register_message_handler(get_photo, state=BugReport.photo)
    dp.register_callback_query_handler(send_photo, lambda call: True, state=BugReport.photo_agree)
    dp.register_callback_query_handler(screenshot, lambda call: True, state=BugReport.photo_send)
    dp.register_message_handler(photo, state=BugReport.photo_send, content_types=["photo"])
    dp.register_callback_query_handler(report_send, lambda call: True, state=BugReport.send)
